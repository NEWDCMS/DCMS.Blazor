<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Blazor For Beginners – Getting Started With Blazor" xml:space="preserve">
    <value>Blazor面向初学者–Blazor入门</value>
  </data>
  <data name="Blazor Hero Description" xml:space="preserve">
    <value>Blazor Hero是Blazor Web Assembly的一个多合一的干净体系结构解决方案模板</value>
  </data>
  <data name="Brands" xml:space="preserve">
    <value>品牌</value>
  </data>
  <data name="Building A Chat Application With Blazor, Identity, And SignalR" xml:space="preserve">
    <value>使用Blazor、Identity和Signaler构建聊天应用程序</value>
  </data>
  <data name="Celebrating 1,500 Stars on Github!" xml:space="preserve">
    <value>在Github上庆祝1500颗星星！</value>
  </data>
  <data name="Channels" xml:space="preserve">
    <value>经销商</value>
  </data>
  <data name="Component Library" xml:space="preserve">
    <value>组件库</value>
  </data>
  <data name="Custom Authentication In Blazor WebAssembly – Detailed" xml:space="preserve">
    <value>Blazor WebAssembly中的自定义身份验证–详细信息</value>
  </data>
  <data name="Dashboard" xml:space="preserve">
    <value>仪表盘</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Blazor Web组装的干净体系结构模板</value>
  </data>
  <data name="Documentation - Coming Soon" xml:space="preserve">
    <value>文档-即将发布</value>
  </data>
  <data name="Exploring Blazor Project Structure" xml:space="preserve">
    <value>探索Blazor项目结构</value>
  </data>
  <data name="Getting Started" xml:space="preserve">
    <value>开始</value>
  </data>
  <data name="Github Repository : Do Not Forget to Leave a Star ;)" xml:space="preserve">
    <value>Github存储库：别忘了留下星星；）</value>
  </data>
  <data name="Here are few articles that should help you get started with Blazor." xml:space="preserve">
    <value>这里有几篇文章可以帮助你开始使用Blazor。</value>
  </data>
  <data name="How To Implement Blazor CRUD Using Entity Framework Core?" xml:space="preserve">
    <value>如何使用实体框架核心实现Blazor CRUD？</value>
  </data>
  <data name="Implementing Blazor CRUD Using Mudblazor Component Library In .NET 5" xml:space="preserve">
    <value>在 .NET 5 中使用Mudblazor组件库实现Blazor CRUD</value>
  </data>
  <data name="Orders" xml:space="preserve">
    <value>今日订单</value>
  </data>
  <data name="Products" xml:space="preserve">
    <value>商品档案</value>
  </data>
  <data name="Project Page" xml:space="preserve">
    <value>项目页</value>
  </data>
  <data name="Quick Start Guide" xml:space="preserve">
    <value>快速向导</value>
  </data>
  <data name="Read The Guide" xml:space="preserve">
    <value>向导</value>
  </data>
  <data name="Realtime Updates &amp; Insights with SignalR" xml:space="preserve">
    <value>使用SignalR进行实时更新和洞察</value>
  </data>
  <data name="Sales" xml:space="preserve">
    <value>今日销售</value>
  </data>
  <data name="Support Me" xml:space="preserve">
    <value>支持我们!</value>
  </data>
  <data name="Terminals" xml:space="preserve">
    <value>终端</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>DCMS</value>
  </data>
  <data name="Visits" xml:space="preserve">
    <value>今日拜访</value>
  </data>
</root>