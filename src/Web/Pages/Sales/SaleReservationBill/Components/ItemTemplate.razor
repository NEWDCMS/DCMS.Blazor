@inject ModalService ModalService

@using System.Text.Json;
@using Newtonsoft.Json;
@using DCMS.Application.Models;


@namespace DCMS.Web.Pages.Sales.SaleReservationBill

@inherits FeedbackComponent<string, string>

<div>
    <!--//////////////-->
    <Row Gutter="24" Style="margin-top:15px;">
        <GridCol Span="4">
            @*<Search Placeholder="客户" EnterButton="true" />*@

            <AutoComplete Options="@terminals">
                <AutoCompleteSearch Placeholder="选择客户" @bind-Value="@searchValue" EnterButton="true" />
            </AutoComplete>


            @*<AutoComplete Options="options2" OnInput="OnInput" AllowFilter="false">
                <ChildContent>
                <AutoCompleteSearch Placeholder="选择客户" @bind-Value="@value"  EnterButton="true"/>
                </ChildContent>
                <OptionTemplate Context="option">
                <AutoCompleteOption Style="display: flex;" Value="@option.Value.Category">
                查找 @option.Value.Title 在
                <a style=" flex: auto; text-overflow: ellipsis; overflow: hidden;"
                href="?q=@(option.Value.Title)"
                target="_blank"
                rel="noopener noreferrer">
                @option.Value.Category
                </a>
                <span style="flex: none;">@option.Value.Count 结果</span>
                </AutoCompleteOption>
                </OptionTemplate>
                </AutoComplete>
            *@
        </GridCol>
        <GridCol Span="4">
            <Select DataSource="@_persons"
                    @bind-Value="@_selectedValue"
                    LabelName="@nameof(Person.Name)"
                    ValueName="@nameof(Person.Value)"
                    Placeholder="业务员"
                    DefaultActiveFirstItem="false"
                    EnableSearch
                    OnBlur="OnBlur"
                    OnFocus="OnFocus"
                    OnSelectedItemChanged="OnSelectedItemChangedHandler"
                    OnSearch="OnSearch">
            </Select>
        </GridCol>

        <GridCol Span="4">
            <Select Placeholder="选择仓库"
                    DataSource="@_businessUsers"
                    @bind-Value="@model.WareHouseId"
                    LabelName="@nameof(BusinessUser.Name)"
                    ValueName="@nameof(BusinessUser.Id)">
            </Select>

        </GridCol>

        <GridCol Span="4">
            <Select Mode="default"
                    Placeholder="付款方式"
                    DataSource="@_payments"
                    @bind-Value="@model.PayTypeId"
                    LabelName="@nameof(Payments.Name)"
                    ValueName="@nameof(Payments.Id)">
            </Select>
        </GridCol>

        <GridCol Span="4">
            <DatePicker TValue="DateTime?" Placeholder="@(new string[]{"开单日期"})" Style="display:block" />
        </GridCol>

        <GridCol Span="4">
            <Input @bind-Value="@txtValue" Placeholder="备注" />
        </GridCol>
    </Row>

    <Row Gutter="24" Style="margin-top:15px;margin-bottom:15px">
        <GridCol Span="4">
            <Select Placeholder="价格方案"
                    DataSource="@_defaultAmounts"
                    @bind-Value="@model.DefaultAmountId"
                    LabelName="@nameof(DefaultAmount.Name)"
                    ValueName="@nameof(DefaultAmount.Id)">
            </Select>
        </GridCol>
        <GridCol Span="4">
            <Checkbox @bind-Value="@txtchecked" Style="margin-top:8px">是否按最小单位销售</Checkbox>
        </GridCol>
    </Row>

    <Table DataSource="listOfData"
           TItem="SaleReservationItemModel"
           RowClassName="@(_=>"editable-row")"
           HidePagination="true"
           Bordered>
        <TitleTemplate>
            <Row Justify="space-around" Align="middle">
                <Col Span="12">
                <Paragraph Copyable Style="font-size:14px;padding:0px;margin:0px">
                    单据编号：XS4343435454545455
                </Paragraph>
                </Col>
                <Col Span="12" Style="text-align:right">
                <Paragraph Copyable Style="font-size:14px;padding:0px;margin:0px">
                    制单：李兴晔 2022/04/25 08:10:21
                </Paragraph>
                </Col>
            </Row>
        </TitleTemplate>
        <RowTemplate>
            <Column DataIndex="@nameof(context.UniqueId)" TData="int" Title="序"></Column>
            <Column Width="20%" DataIndex="@nameof(context.ProductId)" TData="int" Title="商品名称">
                @if (editId == context.UniqueId)
                {
                    <AutoComplete Options="@products">
                        <AutoCompleteSearch Placeholder="选择商品" @bind-Value="context.ProductName" EnterButton="true" OnBlur="stopEdit" AutoFocus />
                    </AutoComplete>
                }
                else
                {
                    <div class="editable-cell-value-wrap" @onclick="()=>startEdit(context)">
                        @context.ProductName
                    </div>
                }
            </Column>
            <Column DataIndex="@nameof(context.BarCode)" @bind-Field="@context.BarCode" Title="条码"></Column>
            <Column DataIndex="@nameof(context.UnitId)" TData="int" Title="单位">
                @if (editId == context.UniqueId)
                {
                    <Select @bind-Value="@context.UnitId"
                        Placeholder="选择单位"
                        TItemValue="int"
                        TItem="string">
                        <SelectOptions>
                            @foreach (var item in context.Product.Units)
                            {
                                <SelectOption TItemValue="int" TItem="string" Value=@item.Value Label=@item.Key />
                            }
                        </SelectOptions>
                    </Select>

                }
                else
                {
                    <div class="editable-cell-value-wrap" @onclick="()=>startEdit(context)">
                        @context.UnitName
                    </div>
                }
            </Column>
            <Column Width="120px" DataIndex="@nameof(context.UnitConvert)" @bind-Field="@context.UnitConvert" Title="单位换算"></Column>
            <Column DataIndex="@nameof(context.Quantity)" @bind-Field="@context.Quantity" Title="数量">
                @if (editId == context.UniqueId)
                {
                    <Input Type="text" @bind-Value="context.Quantity" OnBlur="stopEdit" AutoFocus />
                }
                else
                {
                    <div class="editable-cell-value-wrap" @onclick="()=>startEdit(context)">
                        @context.Quantity
                    </div>
                }
            </Column>
            <Column DataIndex="@nameof(context.Price)" @bind-Field="@context.Price" Title="价格">
                @if (editId == context.UniqueId)
                {
                    <Input Type="text" @bind-Value="context.Price" OnBlur="stopEdit" AutoFocus />
                }
                else
                {
                    <div class="editable-cell-value-wrap" @onclick="()=>startEdit(context)">
                        @context.Price
                    </div>
                }
            </Column>

            <Column DataIndex="@nameof(context.Amount)" TData="decimal" Title="金额"></Column>
            <Column DataIndex="@nameof(context.StockQty)" TData="int" Title="预占库存"></Column>
            <Column DataIndex="@nameof(context.Remark)" TData="string" Title="备注">
                @if (editId == context.UniqueId)
                {
                    <Input Type="text" @bind-Value="context.Remark" OnBlur="stopEdit" AutoFocus />
                }
                else
                {
                    <div class="editable-cell-value-wrap" @onclick="()=>startEdit(context)">
                        @context.Remark
                    </div>
                }
            </Column>
            <ActionColumn Align="ColumnAlign.Center" Width="120px" Title="操作">
                <Button Danger OnClick="()=> deleteRow(context)" Type="primary" Icon="@IconType.Outline.Delete" />
                <Button OnClick="addRow" Type="primary" Icon="@IconType.Outline.Plus" />
            </ActionColumn>
        </RowTemplate>
    </Table>
</div>

<style>
    .editable-cell {
        position: relative;
    }

    .editable-cell-value-wrap {
        padding: 5px 12px;
        cursor: pointer;
    }

    .editable-row:hover .editable-cell-value-wrap {
        padding: 4px 11px;
        border: 1px solid #d9d9d9;
        border-radius: 4px;
    }

    [data-theme='dark'] .editable-row:hover .editable-cell-value-wrap {
        border: 1px solid #434343;
    }
</style>

@code {


    private Form<SaleReservationBillModel> _addform;
    private SaleReservationBillModel model;
    private string config;
    private bool txtchecked { get; set; }
    private string txtValue { get; set; }
    private bool loading = false;

    private int i = 0;
    private int editId;
    private SaleReservationItemModel[] listOfData = { };


    private void OnFinishFailed(EditContext editContext)
    {

    }

    private void OnFinish(EditContext editContext)
    {
        Console.WriteLine("e");
    }

    private void HandleOk(MouseEventArgs e)
    {
        _addform.Submit();
    }

    protected override void OnInitialized()
    {
        model = new SaleReservationBillModel();

        _persons = new List<Person>
        {
            new Person { Value = "1", Name = "小陈" },
            new Person { Value = "2", Name = "小李" },
            new Person { Value = "3" , Name = "小张" }
        };

        config = this.Options;

        addRow();

        base.OnInitialized();
    }

    public override async Task OnFeedbackOkAsync(ModalClosingEventArgs args)
    {
        if (FeedbackRef is ConfirmRef confirmRef)
        {
            confirmRef.Config.OkButtonProps.Loading = true;
            await confirmRef.UpdateConfigAsync();
        }
        else if (FeedbackRef is ModalRef modalRef)
        {
            modalRef.Config.ConfirmLoading = true;
            await modalRef.UpdateConfigAsync();
        }

        await Task.Delay(1000);

        // 只有输入值等于初始化值，OK按钮将关闭确认对话框
        //if (value != config)
        //    args.Cancel = true;
        //else
        //    // method 1(not recommended): await (FeedbackRef as ConfirmRef<string>)!.OkAsync(value);
        //    // method 2: await (FeedbackRef as IOkCancelRef<string>)!.OkAsync(value);
        //    await base.OkCancelRefWithResult!.OnOk(value);

        await base.OnFeedbackOkAsync(args);
    }


    protected override void Dispose(bool disposing)
    {
        Console.WriteLine("Dispose");
        base.Dispose(disposing);
    }


    //GridView


    record BusinessUser(int Id, string Name);
    private List<BusinessUser> _businessUsers = new List<BusinessUser>
    {
            new BusinessUser(1,"小李"),
            new BusinessUser(2,"小王"),
            new BusinessUser(3,"小陈"),
            new BusinessUser(4,"小张")
    };


    record WareHouse(int Id, string Name);
    private List<WareHouse> _wareHouses = new List<WareHouse>
    {
            new WareHouse(1,"仓库"),
            new WareHouse(2,"仓库1"),
            new WareHouse(3,"仓库2"),
            new WareHouse(4,"仓库3")
    };


    record DefaultAmount(string Id, string Name);
    private List<DefaultAmount> _defaultAmounts = new List<DefaultAmount>
    {
            new DefaultAmount("1","方案1"),
            new DefaultAmount("2","方案2")
    };



    record Payments(int Id, string Name);
    private List<Payments> _payments = new List<Payments>
    {
            new Payments(1,"挂账"),
            new Payments(2,"现结")
    };


    //添加行
    void addRow()
    {
        var item = new SaleReservationItemModel()
            {
                UniqueId = i,
                Id = 0,
                BarCode = "20223434343",
                ProductId = 2321323,
                ProductName = "雪花勇闯天涯",
                Quantity = 0,
                UnitId = 2,
                UnitName = "箱",
                Product = new ProductModel()
                {
                    Id = 2321323,
                    ProductId = 2321323,
                    Units = new Dictionary<string, int>()
                    {
                        {"瓶",0 },
                        {"包",1 },
                        {"箱",2 }
                    }
                },
                UnitConvert = "1箱=12瓶",
                Price = 0,
                CostProfitRate = 0,
                Amount = 0,
                StockQty = 0,
                Remark = ""
            };

        listOfData = listOfData.Append(item);
        i++;
    }

    //删除行
    void deleteRow(SaleReservationItemModel row)
    {
        if (listOfData.Count() > 1)
        {
            listOfData = listOfData.Where(d => d.UniqueId != row.UniqueId).ToArray();
        }
        else
        {
            _message.Info($"项目不能为空！");
        }
    }

    //开始编辑行
    void startEdit(SaleReservationItemModel row)
    {
        Serilog.Log.Debug($"{row.UniqueId}");
        editId = row.UniqueId;
    }

    //停止编辑行时更新行
    void stopEdit()
    {
        var editedData = listOfData.FirstOrDefault(x => x.UniqueId == editId);
        if (editedData != null)
        {
            Serilog.Log.Debug($"{editedData?.UniqueId ?? 0}");
            //await _message.Info($"{editedData?.UniqueId ?? 0}");

            Serilog.Log.Debug($"Quantity:{editedData?.Quantity ?? 0}");
            Serilog.Log.Debug($"Price:{editedData?.Price ?? 0}");

            //小计金额
            editedData.Amount = editedData.Quantity * editedData.Price;
            editId = editedData?.UniqueId ?? 0;
        }
    }


    //Select
    class Person
    {
        public string Value { get; set; }
        public string Name { get; set; }
    }

    List<Person> _persons;
    string _selectedValue;
    Person _selectedItem;


    private void OnSelectedItemChangedHandler(Person value)
    {
        _selectedItem = value;
        Console.WriteLine($"selected: ${value?.Name}");
    }

    private void OnBlur()
    {
        Console.WriteLine("blur");
    }

    private void OnFocus()
    {
        Console.WriteLine("focus");
    }

    private void OnSearch(string value)
    {
        Console.WriteLine($"search: {value}");
    }


    //终端逻辑

    private string value;

    List<UncertainCategoryOption> options2 = new List<UncertainCategoryOption>();

    private string inputValue;
    private string searchValue;

    List<string> terminals = new List<string>()
    {
        "黔江古镇烤鱼专销",
        "海鲜砂锅粥专销",
        "八点半烧烤",
        "马老幺烧烤专销",
        "泉鑫石锅饭",
        "味香缘川菜馆",
        "阿香婆川菜专销",
        "许记酒楼",
        "陈家烧烤",
        "和记面庄新希望",
        "鱼你搭档",
        "秀财锅巴饭",
        "鑫源炒菜专销",
        "小肥羊专销",
        "旺角超市",
        "美元一号超市",
        "裕隆便利店",
        "彩荣商店",
        "远景便利店",
        "城西便民店"
    };

    List<string> products = new List<string>()
    {
        "雪花清爽8度330ml听1*12纸箱",
        "雪花勇闯天涯8度500ml听1*12塑料提手礼盒",
        "雪花勇闯天涯8度500ml听6*4塑膜六连包运输装纸箱",
        "雪花原汁麦9度500ml白瓶1*6纸箱陕西专供有奖版AA",
        "勇闯天涯superX9度500ml听3*4卡纸三连包纸箱",
        "雪花马尔斯绿8度500ml听3*4卡纸三连包纸箱",
        "雪花脸谱旦角8度330ml统一标准专用棕C瓶1*12纸箱含瓶",
        "雪花马尔斯绿8度500ml听1*12纸箱",
        "雪花纯生8度500ml听1*12纸箱手提扣",
        "雪花酷爽9度500ml统一标准专用白瓶1*12",
        "雪花勇闯天涯8度500ml统一标准专用白瓶1*12纸箱陕西专供",
        "雪花勇闯天涯8度330ml听6*4卡纸六联包纸箱JJ斗地主版",
        "金威high-bar菠萝味饮料500ml雪花统一专用白瓶1*9塑封",
        "雪花勇闯天涯8度500ml白瓶1*12纸箱酒店专供",
        "雪花勇闯天涯8度500ml白瓶1*6纸箱",
        "雪花原汁麦9度500ml听6*4塑膜六连包纸箱",
        "勇闯天涯superX9度500ml雪花统一标准专用蓝瓶1*12纸箱",
        "勇闯天涯superX9度500ml听1*12纸箱",
        "雪花纯生8度330ml听6*4卡纸六连包纸箱"
    };

    void OnInput(ChangeEventArgs e)
    {
        var v = e?.Value?.ToString();

        var r = new Random();
        var i = 0;
        this.options2 = new int[7].Select(x => new UncertainCategoryOption()
            {
                Title = v,
                Category = $"{v}{i++}",
                Count = r.Next(100, 200),
            }).ToList();
    }

    public class UncertainCategoryOption
    {
        public string Title { get; set; }

        public string Category { get; set; }
        public int Count { get; set; }
    }

}